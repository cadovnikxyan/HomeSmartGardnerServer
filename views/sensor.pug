doctype html
//
  Written by David Neuy
  Version 0.1.0 @ 03.12.2014
  This script was first published at: http://www.home-automation-community.com/
  You may republish it as is or publish a modified version only when you
  provide a link to 'http://www.home-automation-community.com/'.
head
  title Refrigerator Sensor
  script(src='https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js')
  script(src='https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js')
  script(src='https://d3js.org/d3.v3.min.js')
  script(src='https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.1.15-beta/nv.d3.min.js')
  link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/nvd3/1.1.15-beta/nv.d3.css')
  link(rel='stylesheet' href='https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/themes/smoothness/jquery-ui.css')
  style.
    body {
    font-size: 16px;
    font-family: verdana,helvetica,arial,sans-serif;
    }
    table {
    background:#CCC;border:1px solid #000;margin-bottom:5px;
    }
    table td, th {
    padding-left:10px;padding-right:10px;border:1px solid #DDD;
    }
  script.
    var chartDatetimeFormatter   = d3.time.format("%d.%m.%y - %H:%M"); //see https://github.com/mbostock/d3/wiki/Time-Formatting
    var tableDatetimeFormatter   = d3.time.format("%d.%m.%y - %H:%M:%S"); //see https://github.com/mbostock/d3/wiki/Time-Formatting
    var soapServiceHistDataUrl   = document.URL + "/historical-sensordata/";
    var soapServiceLatestDataUrl = document.URL + "/latest-sensordata/";
  script.
    $(function() {
    $("#fromdate").datepicker({
    changeMonth: true,
    onClose: function(selectedDate) {
    $("#todate").datepicker("option", "minDate", selectedDate);
    }
    });
    $("#todate").datepicker({
    changeMonth: true,
    onClose: function( selectedDate ) {
    $("#fromdate").datepicker("option", "maxDate", selectedDate);
    }
    });
    });
  script.
    $(function() {
    $("#refresh_historical_btn")
    .button()
    .click(function(event) {
    getHistoricalSensordata();
    });
    });
    $(function() {
    $("#refresh_latest_btn")
    .button()
    .click(function(event) {
    getLatestSensordata();
    });
    });
    function getHistoricalSensordata() {
      var fromDate   = $("#fromdate").val();
      var fromTs     = fromDate == "" ? "" : Date.parse(fromDate);
      var toDate     = $("#todate").val();
      var oneDayInMs = new Date(1970, 0, 2) - new Date(1970, 0, 1);
      var toTs       = toDate == "" ? "" : Date.parse(toDate) + oneDayInMs - 1; //increase to end of day
    $.ajax({
    url: soapServiceHistDataUrl + "?fromtimestamp=" + fromTs + "&totimestamp=" + toTs
    }).then(function(data) {
      var chartData = [];
      data.forEach(function(elem) {
      var color = elem.sensorKind == 'temperature' ? '#A4C4E8' : elem.sensorKind == 'humidity' ? '#FCDAB0' : '#336600';
      chartData.push({key: (elem.sensorKind +" " +elem.sensorName), area: true, color: color, values: elem.values});
    });
    drawChart(chartData);
    });
    }
    function getLatestSensordata() {
    $.ajax({
    url: soapServiceLatestDataUrl
    }).then(function(data) {
      $('#dynamictable').empty();
      $('#dynamictable').append('<table></table>');
      var table = $('#dynamictable').children();
      table.append("<tr><th>Sensor Kind</th><th>Sensor Name</th><th>Value Time</th><th>Value</th></tr>");
      data.forEach(function(elem) {
      table.append("<tr><td>" + elem.sensorKind + "</td><td>" + elem.sensorName + "</td><td>" + tableDatetimeFormatter(new Date(elem.values[0].x)) + "</td><td>" + elem.values[0].y.toFixed(1) + "</td></tr>");
    });
    });
    }
    function drawChart(tempHumidData) {
    nv.addGraph(function() {
    // For other chart types see: https://nvd3.org/examples/index.html
    // API documentation: https://github.com/novus/nvd3/wiki/API-Documentation
    var chart = nv.models.lineChart()
    .margin({left: 100})
    .margin({bottom: 130})
    .useInteractiveGuideline(true)
    .transitionDuration(500)
    .showLegend(true);
    chart.xAxis
    .rotateLabels(-45)
    .tickFormat(function(d) {
    return chartDatetimeFormatter(new Date(d))
    });
    chart.yAxis
    .axisLabel('Temperature Â°C / Humidity %')
    .tickFormat(d3.format('.01f'));
    d3.select('#chart svg')
    .datum(tempHumidData)
    .call(chart);
    nv.utils.windowResize(function() { chart.update() });
    return chart;
    });
    }
h1 Refrigerator Chart
#chart
  svg(style='height:500px')
script.
  getHistoricalSensordata();
  getLatestSensordata();
.ui-widget
  label(for='fromdate') From
  input#fromdate(type='text' name='fromdate')
  label(for='todate') To
  input#todate(type='text' name='fromdate')
  button#refresh_historical_btn Refresh Chart
br
.ui-widget
  #dynamictable
  button#refresh_latest_btn Refresh Latest Values
